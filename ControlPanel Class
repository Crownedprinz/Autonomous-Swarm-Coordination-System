import javafx.geometry.Insets;
import javafx.scene.control.*;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;
import java.util.Map;

public class ControlPanel {
    private VBox panel;
    private EventBus eventBus;
    private SystemController systemController;
    private Text decisionDisplay;
    private Visualizer visualizer;  // For waypoint mouse integration

    public ControlPanel(EventBus eventBus, SystemController systemController) {
        this.eventBus = eventBus;
        this.systemController = systemController;
        this.visualizer = null;  // Set externally if needed
        setupUI();
    }

    public void setVisualizer(Visualizer viz) {
        this.visualizer = viz;
    }

    public VBox getPanel() {
        return panel;
    }

    private void setupUI() {
        panel = new VBox(10);
        panel.setPadding(new Insets(10));
        panel.setStyle("-fx-background-color: lightgray;");

        // Agent Controls
        HBox agentControls = new HBox(10);
        Button spawnButton = new Button("Spawn Agent");
        spawnButton.setOnAction(e -> {
            SystemCommand cmd = new SystemCommand();
            cmd.type = CommandType.SPAWN_AGENT;
            cmd.parameters = Map.of("position", new Point2D(100, 100), "maxSpeed", 50.0);
            cmd.timestamp = System.currentTimeMillis();
            systemController.executeCommand(cmd);
        });
        Button removeButton = new Button("Remove Agent");
        removeButton.setOnAction(e -> {
            TextInputDialog dialog = new TextInputDialog();
            dialog.setTitle("Remove Agent ID");
            String idStr = dialog.showAndWait().orElse(null);
            if (idStr != null && !idStr.isEmpty()) {
                try {
                    int agentId = Integer.parseInt(idStr);
                    SystemCommand cmd = new SystemCommand();
                    cmd.type = CommandType.REMOVE_AGENT;
                    cmd.parameters = Map.of("agentId", agentId);
                    cmd.timestamp = System.currentTimeMillis();
                    systemController.executeCommand(cmd);
                } catch (NumberFormatException ex) {
                    // Handle invalid input (e.g., alert)
                }
            }
        });
        agentControls.getChildren().addAll(spawnButton, removeButton);

        // Waypoint Button
        Button waypointButton = new Button("Enable Waypoint Placement");
        waypointButton.setOnAction(e -> enableWaypointMode());

        // Behavior Sliders (to Lauren)
        HBox sepBox = createSliderBox("Separation Weight", 0, 2, 1.5, "separationWeight");
        HBox alignBox = createSliderBox("Alignment Weight", 0, 2, 1.0, "alignmentWeight");
        HBox cohesionBox = createSliderBox("Cohesion Weight", 0, 2, 1.0, "cohesionWeight");

        // Network Slider (to John)
        HBox commBox = createNetworkSliderBox("Comm Range", 50, 200, 100, "maxRange");

        // Decision Display
        decisionDisplay = new Text("No active decisions");
        decisionDisplay.setFill(javafx.scene.paint.Color.BLACK);

        // Simulation Controls
        HBox simControls = new HBox(10);
        Button startButton = new Button("Start Simulation");
        startButton.setOnAction(e -> {
            SystemCommand cmd = new SystemCommand();
            cmd.type = CommandType.START_SIMULATION;
            cmd.timestamp = System.currentTimeMillis();
            systemController.executeCommand(cmd);
        });
        Button stopButton = new Button("Stop Simulation");
        stopButton.setOnAction(e -> {
            SystemCommand cmd = new SystemCommand();
            cmd.type = CommandType.STOP_SIMULATION;
            cmd.timestamp = System.currentTimeMillis();
            systemController.executeCommand(cmd);
        });
        simControls.getChildren().addAll(startButton, stopButton);

        // Add to panel
        panel.getChildren().addAll(
            new Label("Ground Control Panel"),
            agentControls,
            waypointButton,
            sepBox, alignBox, cohesionBox,
            commBox,
            decisionDisplay,
            simControls
        );
    }

    private HBox createSliderBox(String labelText, double min, double max, double initial, String paramKey) {
        Slider slider = new Slider(min, max, initial);
        slider.setShowTickLabels(true);
        slider.setMajorTickUnit(0.5);
        Label label = new Label(labelText + ":");
        HBox box = new HBox(10, label, slider);
        slider.valueProperty().addListener((obs, old, newVal) -> {
            BehaviorConfiguration config = new BehaviorConfiguration();
            config.parameters = Map.of(paramKey, newVal.doubleValue());
            config.timestamp = System.currentTimeMillis();
            eventBus.publishEvent(new SystemEvent(EventType.BEHAVIOR_CONFIG, "Anthony", config));
        });
        return box;
    }

    private HBox createNetworkSliderBox(String labelText, double min, double max, double initial, String paramKey) {
        Slider slider = new Slider(min, max, initial);
        slider.setShowTickLabels(true);
        slider.setMajorTickUnit(25);
        Label label = new Label(labelText + ":");
        HBox box = new HBox(10, label, slider);
        slider.valueProperty().addListener((obs, old, newVal) -> {
            NetworkConfiguration config = new NetworkConfiguration();
            config.parameters = Map.of(paramKey, newVal.doubleValue());
            config.timestamp = System.currentTimeMillis();
            eventBus.publishEvent(new SystemEvent(EventType.NETWORK_CONFIG, "Anthony", config));
        });
        return box;
    }

    public void handleWaypointPlacement(Point2D position) {
        if (position == null) return;
        SystemCommand cmd = new SystemCommand();
        cmd.type = CommandType.PLACE_WAYPOINT;
        cmd.parameters = Map.of("position", position);
        cmd.timestamp = System.currentTimeMillis();
        systemController.executeCommand(cmd);
    }

    public void handleParameterChange(String parameter, Object value) {
        if (value == null) return;
        if (parameter.startsWith("behavior")) {
            BehaviorConfiguration config = new BehaviorConfiguration();
            config.parameters = Map.of(parameter, value);
            config.timestamp = System.currentTimeMillis();
            eventBus.publishEvent(new SystemEvent(EventType.BEHAVIOR_CONFIG, "Anthony", config));
        } else if ("communicationRange".equals(parameter)) {
            NetworkConfiguration config = new NetworkConfiguration();
            config.parameters = Map.of(parameter, value);
            config.timestamp = System.currentTimeMillis();
            eventBus.publishEvent(new SystemEvent(EventType.NETWORK_CONFIG, "Anthony", config));
        }
    }

    public void updateDecisionDisplay(DecisionStatus status) {
        if (status == null) return;
        decisionDisplay.setText("Decision: " + (status.currentDecision != null ? status.currentDecision : "None") +
                                " | Consensus: " + (status.consensusReached ? "Yes" : "Pending") +
                                " | Progress: " + (int)(status.progress * 100) + "%");
    }

    private void enableWaypointMode() {
        if (visualizer != null && visualizer.canvas != null) {  // Access via setter
            visualizer.canvas.setOnMouseClicked(e -> {
                Point2D pos = new Point2D(e.getX(), e.getY());
                handleWaypointPlacement(pos);
            });
        }
    }
}
