import javafx.geometry.Insets;
import javafx.scene.control.*;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Text;
import javafx.event.EventHandler;
import javafx.scene.input.MouseEvent;

// Assumed: SystemCommand, CommandType, BehaviorConfiguration, NetworkConfiguration, Point2D.

public class ControlPanel {
    private VBox panel;
    private EventBus eventBus;
    private SystemController systemController;
    private Visualizer visualizer;
    private Text decisionDisplay;

    public ControlPanel(EventBus eventBus, SystemController systemController, Visualizer visualizer) {
        this.eventBus = eventBus;
        this.systemController = systemController;
        this.visualizer = visualizer;
        setupUI();
    }

    public VBox getPanel() {
        return panel;
    }

    private void setupUI() {
        panel = new VBox(10);
        panel.setPadding(new Insets(10));
        panel.setStyle("-fx-background-color: lightgray;");

        // Agent Controls
        HBox agentControls = new HBox(10);
        Button spawnButton = new Button("Spawn Agent");
        spawnButton.setOnAction(e -> {
            SystemCommand cmd = new SystemCommand();
            cmd.type = CommandType.SPAWN_AGENT;
            cmd.parameters.put("position", new Point2D(100, 100));
            cmd.parameters.put("maxSpeed", 50.0);
            cmd.timestamp = System.currentTimeMillis();
            systemController.executeCommand(cmd);
        });
        Button removeButton = new Button("Remove Agent");
        removeButton.setOnAction(e -> {
            TextInputDialog dialog = new TextInputDialog();
            dialog.setTitle("Remove Agent ID");
            Optional<String> result = dialog.showAndWait();
            result.ifPresent(idStr -> {
                try {
                    SystemCommand cmd = new SystemCommand();
                    cmd.type = CommandType.REMOVE_AGENT;
                    cmd.parameters.put("agentId", Integer.parseInt(idStr));
                    cmd.timestamp = System.currentTimeMillis();
                    systemController.executeCommand(cmd);
                } catch (NumberFormatException ex) {
                    // Handle invalid input (e.g., alert)
                }
            });
        });
        agentControls.getChildren().addAll(spawnButton, removeButton);

        // Waypoint Button
        Button waypointButton = new Button("Enable Waypoint Placement");
        waypointButton.setOnAction(e -> enableWaypointMode());

        // Parameter Sliders
        HBox sepBox = createSliderBox("Separation Weight", 0, 2, 1.5, val -> {
            BehaviorConfiguration config = new BehaviorConfiguration();
            config.parameters.put("separationWeight", val);
            eventBus.publishEvent(new SystemEvent(EventType.BEHAVIOR_CONFIG, "Anthony", config));
        });

        HBox alignBox = createSliderBox("Alignment Weight", 0, 2, 1.0, val -> {
            BehaviorConfiguration config = new BehaviorConfiguration();
            config.parameters.put("alignmentWeight", val);
            eventBus.publishEvent(new SystemEvent(EventType.BEHAVIOR_CONFIG, "Anthony", config));
        });

        HBox commBox = createSliderBox("Comm Range", 50, 200, 100, val -> {
            NetworkConfiguration config = new NetworkConfiguration();
            config.parameters.put("maxRange", val);
            eventBus.publishEvent(new SystemEvent(EventType.NETWORK_CONFIG, "Anthony", config));
        });

        // Decision Display
        decisionDisplay = new Text("No active decisions");
        decisionDisplay.setFill(Color.BLACK);

        // Simulation Controls
        HBox simControls = new HBox(10);
        Button startButton = new Button("Start Simulation");
        startButton.setOnAction(e -> {
            SystemCommand cmd = new SystemCommand();
            cmd.type = CommandType.START_SIMULATION;
            systemController.executeCommand(cmd);
        });
        Button stopButton = new Button("Stop Simulation");
        stopButton.setOnAction(e -> {
            SystemCommand cmd = new SystemCommand();
            cmd.type = CommandType.STOP_SIMULATION;
            systemController.executeCommand(cmd);
        });
        simControls.getChildren().addAll(startButton, stopButton);

        // Assemble panel
        panel.getChildren().addAll(
            new Label("Ground Control Panel"),
            agentControls,
            waypointButton,
            sepBox,
            alignBox,
            commBox,
            decisionDisplay,
            simControls
        );
    }

    private HBox createSliderBox(String labelText, double min, double max, double initial, javafx.util.Callback<Double, Void> onChange) {
        Label label = new Label(labelText + ":");
        Slider slider = new Slider(min, max, initial);
        slider.setShowTickLabels(true);
        slider.setMajorTickUnit((max - min) / 5);
        slider.valueProperty().addListener((obs, old, newVal) -> onChange.call(newVal.doubleValue()));
        return new HBox(10, label, slider);
    }

    public void handleWaypointPlacement(Point2D position) {
        SystemCommand cmd = new SystemCommand();
        cmd.type = CommandType.PLACE_WAYPOINT;
        cmd.parameters.put("position", position);
        cmd.timestamp = System.currentTimeMillis();
        systemController.executeCommand(cmd);
    }

    public void updateDecisionDisplay(DecisionStatus status) {
        String text = "Decision: " + (status.currentDecision != null ? status.currentDecision : "None") +
                      " | Consensus: " + (status.consensusReached ? "Yes" : "Pending") +
                      " | Progress: " + (status.progress != null ? status.progress + "%" : "N/A");
        decisionDisplay.setText(text);
    }

    private void enableWaypointMode() {
        // Add temporary mouse listener to canvas for waypoint clicks
        EventHandler<MouseEvent> handler = e -> {
            Point2D pos = new Point2D(e.getX(), e.getY());  // Canvas coords; map to world if needed
            handleWaypointPlacement(pos);
            // Remove listener after click (or toggle)
            visualizer.canvas.removeEventHandler(MouseEvent.MOUSE_CLICKED, handler);
            ((Button) panel.getChildren().get(2)).setText("Enable Waypoint Placement");  // Reset button
        };
        visualizer.canvas.setOnMouseClicked(handler);
        // Update button text
        ((Button) panel.getChildren().get(2)).setText("Click Canvas to Place Waypoint (Click Again to Disable)");
    }
}
