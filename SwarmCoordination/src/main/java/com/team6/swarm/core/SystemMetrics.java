/**
 * SYSTEMMETRICS CLASS - Performance Monitoring Data
 *
 * PURPOSE:
 * - Stores system-wide performance and operational statistics
 * - Enables monitoring of swarm system health and efficiency
 * - Provides data for performance optimization and debugging
 *
 * CORE METRICS:
 * 1. totalAgents - Total number of agents in system
 * 2. activeAgents - Number of agents with ACTIVE status
 * 3. averageSpeed - Mean velocity magnitude across all agents
 * 4. systemLoad - CPU/processing load percentage (0.0-1.0)
 * 5. updatesPerSecond - Simulation update frequency (target: 30-60)
 * 6. memoryUsage - System memory consumption (0.0-1.0)
 *
 * CALCULATION LOGIC:
 * - activeAgents: count of agents where status == AgentStatus.ACTIVE
 * - averageSpeed: sum(agent.velocity.magnitude()) / totalAgents
 * - systemLoad: processing time / available time per frame
 * - updatesPerSecond: actual measured update frequency
 * - memoryUsage: (used memory / total memory)
 *
 * EXPECTED VALUE RANGES:
 * - totalAgents: 0 to system limit (typically 100-1000)
 * - activeAgents: 0 to totalAgents
 * - averageSpeed: 0.0 to maxSpeed (typically 0-50 units/sec)
 * - systemLoad: 0.0 (idle) to 1.0 (100% CPU)
 * - updatesPerSecond: target 30-60, acceptable 15-120
 * - memoryUsage: 0.0 to 1.0 (warning if > 0.8)
 *
 * USAGE EXAMPLES:
 * - SystemMetrics metrics = new SystemMetrics();
 * - metrics.totalAgents = 50;
 * - metrics.activeAgents = 47;
 * - metrics.averageSpeed = 23.5;
 * - if (metrics.systemLoad > 0.8) { reduceUpdateFrequency(); }
 *
 * MONITORING ALERTS:
 * - systemLoad > 0.9: Performance warning
 * - updatesPerSecond < 20: Simulation running slowly
 * - memoryUsage > 0.8: Memory pressure
 * - activeAgents / totalAgents < 0.7: Many agents offline
 *
 * INTEGRATION:
 * - Generated by AgentManager.getVisualizationUpdate()
 * - Consumed by monitoring dashboards
 * - Used for automatic performance tuning
 * - Logged for system analysis and debugging
 */
package com.team6.swarm.core;

public class SystemMetrics {
    public int totalAgents;
    public int activeAgents;
    public double averageSpeed;
    public double systemLoad;
    public int updatesPerSecond;
    public double memoryUsage;

    // Tracking counters
    private int stateUpdateCount;
    private int taskCompletionCount;
    private int communicationCount;
    private long frameCount;
    private double totalFrameTime;

    public SystemMetrics() {
        // Initialize with defaults
        this.stateUpdateCount = 0;
        this.taskCompletionCount = 0;
        this.communicationCount = 0;
        this.frameCount = 0;
        this.totalFrameTime = 0.0;
    }

    /**
     * Update metrics for current frame
     * @param agentCount Number of agents in system
     * @param deltaTime Time since last frame in seconds
     */
    public void update(int agentCount, double deltaTime) {
        this.totalAgents = agentCount;
        this.frameCount++;
        this.totalFrameTime += deltaTime;

        // Calculate updates per second (running average)
        if (totalFrameTime > 0) {
            this.updatesPerSecond = (int) (frameCount / totalFrameTime);
        }

        // Calculate system load (simplified)
        this.systemLoad = Math.min(1.0, deltaTime * 60.0); // Assumes 60 FPS target

        // Update memory usage
        Runtime runtime = Runtime.getRuntime();
        this.memoryUsage = (double) (runtime.totalMemory() - runtime.freeMemory()) / runtime.maxMemory();
    }

    /**
     * Record an agent state update event
     */
    public void recordStateUpdate() {
        this.stateUpdateCount++;
    }

    /**
     * Record a task completion event
     * @param status Completion status of the task
     */
    public void recordTaskCompletion(TaskCompletionReport.CompletionStatus status) {
        this.taskCompletionCount++;
    }

    /**
     * Record a communication event
     */
    public void recordCommunication() {
        this.communicationCount++;
    }

    // Getters for tracking counts
    public int getStateUpdateCount() {
        return stateUpdateCount;
    }

    public int getTaskCompletionCount() {
        return taskCompletionCount;
    }

    public int getCommunicationCount() {
        return communicationCount;
    }
}